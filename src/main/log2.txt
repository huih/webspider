<div id="cnblogs_post_body"><p>appSettings太简单，为每个程序自定义配置节点太复杂，因此要解决app.config&amp;web.config自定义配置的<span style="color: #ff0000;">复用</span>问题。</p>
<p>1.读取不依赖SectionName,根节点可以定义为任何名称。</p>
<p>2.足够简单，配置项采用name value的形式；足够复杂，采用<span style="color: #ff0000;">树型</span>结构，每个节点都可以有多个配置项和子节点。</p>
<p>3.使用简单，采用路径简化配置项的读取。如:&nbsp;config.Get&lt;string&gt;("root.sub.item-test")。</p>
<h3>一、调用方式：</h3>
<p>1.配置文件：</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version="1.0" encoding="utf-8" </span><span style="color: #0000ff;">?&gt;</span>
<span style="color: #0000ff;">&lt;</span><span style="color: #800000;">configuration</span><span style="color: #0000ff;">&gt;</span>
  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">configSections</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">section </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="node"</span><span style="color: #ff0000;"> type</span><span style="color: #0000ff;">="Onion.Configuration.AppConfig.ConfigSection,Onion.Configuration"</span> <span style="color: #0000ff;">/&gt;</span>
  <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">configSections</span><span style="color: #0000ff;">&gt;</span>
  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">node </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="root"</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="version"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="1.0.0.1"</span> <span style="color: #0000ff;">/&gt;</span>
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">nodes</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">node </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="runtime"</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="debug"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="false"</span> <span style="color: #0000ff;">/&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="ioc"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="IoC.Contianer.StructureMapIoC"</span> <span style="color: #0000ff;">/&gt;</span>
        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">node</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">node </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="upload"</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="auth"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="true"</span> <span style="color: #0000ff;">/&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="path"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="~/upload"</span> <span style="color: #0000ff;">/&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="url"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="~/Upload/Index"</span> <span style="color: #0000ff;">/&gt;</span>
        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">node</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">node </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="captcha"</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="timeout"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="3000"</span> <span style="color: #0000ff;">/&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="url"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="~/Captcha/Index"</span> <span style="color: #0000ff;">/&gt;</span>
        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">node</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">node </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="oauth2"</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="disabled"</span><span style="color: #ff0000;"> value </span><span style="color: #0000ff;">="false"</span> <span style="color: #0000ff;">/&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="callback"</span><span style="color: #ff0000;"> value </span><span style="color: #0000ff;">="/Home/ExternalLoginCallBack?ProviderName="</span> <span style="color: #0000ff;">/&gt;</span>
        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">nodes</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">node </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="qqclient"</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
              <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="disabled"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="false"</span> <span style="color: #0000ff;">/&gt;</span>
              <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="method"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="get"</span> <span style="color: #0000ff;">/&gt;</span>
              <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="key"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="9233e24d"</span> <span style="color: #0000ff;">/&gt;</span>
              <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="secret"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="1ac35907-7cfa-4079-975c-959b98d23a95"</span> <span style="color: #0000ff;">/&gt;</span>
            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">node</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">node </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="weiboclient"</span><span style="color: #0000ff;">&gt;</span>
            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
              <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="disabled"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="true"</span> <span style="color: #0000ff;">/&gt;</span>
              <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="method"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="post"</span> <span style="color: #0000ff;">/&gt;</span>
              <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="key"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="0cdea8f3"</span> <span style="color: #0000ff;">/&gt;</span>
              <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">item </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">="secret"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="dc679dbb-7e75-44f7-a99e-5359259fc94b"</span> <span style="color: #0000ff;">/&gt;</span>
            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">items</span><span style="color: #0000ff;">&gt;</span>
          <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">node</span><span style="color: #0000ff;">&gt;</span>
        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">nodes</span><span style="color: #0000ff;">&gt;</span>
      <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">node</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">nodes</span><span style="color: #0000ff;">&gt;</span>
  <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">node</span><span style="color: #0000ff;">&gt;</span>
<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">configuration</span><span style="color: #0000ff;">&gt;</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>
<p>2.调用代码：</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #000000;">[Fact]
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> Tests()
        {
            </span><span style="color: #0000ff;">var</span> config = <span style="color: #0000ff;">new</span><span style="color: #000000;"> AppConfigAdapter();

            Assert.True(config.Get</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">version</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">1.0.0.1</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            Assert.True(config.Get</span>&lt;<span style="color: #0000ff;">bool</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">runtime.debug</span><span style="color: #800000;">"</span>) == <span style="color: #0000ff;">false</span><span style="color: #000000;">);
            Assert.True(config.Get</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">runtime.ioc</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">IoC.Contianer.StructureMapIoC</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            Assert.True(config.Get</span>&lt;<span style="color: #0000ff;">bool</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">upload.auth</span><span style="color: #800000;">"</span>) == <span style="color: #0000ff;">true</span><span style="color: #000000;">);
            Assert.True(config.Get</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">upload.path</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">~/upload</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            Assert.True(config.Get</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">upload.url</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">~/Upload/Index</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            Assert.True(config.Get</span>&lt;<span style="color: #0000ff;">int</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">captcha.timeout</span><span style="color: #800000;">"</span>) == <span style="color: #800080;">3000</span><span style="color: #000000;">);
            Assert.True(config.Get</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">captcha.url</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">~/Captcha/Index</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            Assert.True(config.Get</span>&lt;<span style="color: #0000ff;">bool</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">oauth2.disabled</span><span style="color: #800000;">"</span>) == <span style="color: #0000ff;">false</span><span style="color: #000000;">);
            Assert.True(config.Get</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">oauth2.callback</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">/Home/ExternalLoginCallBack?ProviderName=</span><span style="color: #800000;">"</span><span style="color: #000000;">);
            Assert.True(config.GetNode(</span><span style="color: #800000;">"</span><span style="color: #800000;">oauth2</span><span style="color: #800000;">"</span>).Nodes.Any(o =&gt; o.GetItem&lt;<span style="color: #0000ff;">bool</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">disabled</span><span style="color: #800000;">"</span><span style="color: #000000;">)));
            </span><span style="color: #0000ff;">foreach</span> (<span style="color: #0000ff;">var</span> node <span style="color: #0000ff;">in</span> config.GetNode(<span style="color: #800000;">"</span><span style="color: #800000;">oauth2</span><span style="color: #800000;">"</span><span style="color: #000000;">).Nodes)
            {
                </span><span style="color: #0000ff;">if</span> (node.Name == <span style="color: #800000;">"</span><span style="color: #800000;">qqclient</span><span style="color: #800000;">"</span><span style="color: #000000;">)
                {
                    Assert.True(node.GetItem</span>&lt;<span style="color: #0000ff;">bool</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">disabled</span><span style="color: #800000;">"</span>) == <span style="color: #0000ff;">false</span><span style="color: #000000;">);
                    Assert.True(node.GetItem</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">method</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">get</span><span style="color: #800000;">"</span><span style="color: #000000;">);
                    Assert.True(node.GetItem</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">key</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">9233e24d</span><span style="color: #800000;">"</span><span style="color: #000000;">);
                    Assert.True(node.GetItem</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">secret</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">1ac35907-7cfa-4079-975c-959b98d23a95</span><span style="color: #800000;">"</span><span style="color: #000000;">);
                }
                </span><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (node.Name == <span style="color: #800000;">"</span><span style="color: #800000;">weiboclient</span><span style="color: #800000;">"</span><span style="color: #000000;">)
                {
                    Assert.True(node.GetItem</span>&lt;<span style="color: #0000ff;">bool</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">disabled</span><span style="color: #800000;">"</span>) == <span style="color: #0000ff;">true</span><span style="color: #000000;">);
                    Assert.True(node.GetItem</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">method</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">post</span><span style="color: #800000;">"</span><span style="color: #000000;">);
                    Assert.True(node.GetItem</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">key</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">0cdea8f3</span><span style="color: #800000;">"</span><span style="color: #000000;">);
                    Assert.True(node.GetItem</span>&lt;<span style="color: #0000ff;">string</span>&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">secret</span><span style="color: #800000;">"</span>) == <span style="color: #800000;">"</span><span style="color: #800000;">dc679dbb-7e75-44f7-a99e-5359259fc94b</span><span style="color: #800000;">"</span><span style="color: #000000;">);
                }
            }
        }</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>
<h3>二、接口定义：</h3>
<p>1.配置项定义：IItem接口定义最基础的配置项，只包含Name和Value属性。</p>
<div class="cnblogs_code">
<pre>public&nbsp;interface&nbsp;IItem
{
&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;Name&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}
 
&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;Value&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}
}</pre>
</div>
<p><span style="font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 1.5;">2.配置节点定义：INode接口定义了配置节点的树形结构</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre>public&nbsp;interface&nbsp;INode
{
&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;Name&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}
 
&nbsp;&nbsp;&nbsp;&nbsp;IEnumerable&lt;IItem&gt;&nbsp;Items&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}
 
&nbsp;&nbsp;&nbsp;&nbsp;IEnumerable&lt;INode&gt;&nbsp;Nodes&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}
 
&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;GetItem(string&nbsp;itemName);
 
&nbsp;&nbsp;&nbsp;&nbsp;T&nbsp;GetItem&lt;T&gt;(string&nbsp;itemName);
}</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>
<p>&nbsp;</p>
<p>3.读取接口定义：IConfig接口定义了配置节点和配置项的读取</p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre>public&nbsp;interface&nbsp;IConfig
{
&nbsp;&nbsp;&nbsp;&nbsp;INode&nbsp;GetNode(string&nbsp;nodeName);
 
&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;Get(string&nbsp;nameOrPath);
 
&nbsp;&nbsp;&nbsp;&nbsp;T&nbsp;Get&lt;T&gt;(string&nbsp;nameOrPath);
}</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>
<p>以上3个接口定义了所有的逻辑。</p>
<h3>三、接口实现：</h3>
<p>1.自定义ItemElement（IItem）和ItemElementCollection用于实现单个节点的配置项读取。</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('07adf04e-a4e6-458c-b7b2-f6643e9e789d')"><img id="code_img_closed_07adf04e-a4e6-458c-b7b2-f6643e9e789d" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" style="display: none;"><img id="code_img_opened_07adf04e-a4e6-458c-b7b2-f6643e9e789d" class="code_img_opened" style="display: inline;" onclick="cnblogs_code_hide('07adf04e-a4e6-458c-b7b2-f6643e9e789d',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="">
<div id="cnblogs_code_open_07adf04e-a4e6-458c-b7b2-f6643e9e789d" class="cnblogs_code_hide" style="display: block;"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div>
<pre>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ItemElement : ConfigurationElement, IItem
    {
        [ConfigurationProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>, IsRequired = <span style="color: #0000ff;">true</span><span style="color: #000000;">)]
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> Name
        {
            </span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> Convert.ToString(<span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span><span style="color: #000000;">]); }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }

        [ConfigurationProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">value</span><span style="color: #800000;">"</span>, IsRequired = <span style="color: #0000ff;">true</span><span style="color: #000000;">)]
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> Value
        {
            </span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> Convert.ToString(<span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">value</span><span style="color: #800000;">"</span><span style="color: #000000;">]); }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">value</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }
    }
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> ItemElementCollection : ConfigurationElementCollection, IEnumerable&lt;IItem&gt;<span style="color: #000000;">
    {
        </span><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span><span style="color: #000000;"> ConfigurationElement CreateNewElement()
        {
            </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> ItemElement();
        }

        </span><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">object</span><span style="color: #000000;"> GetElementKey(ConfigurationElement element)
        {
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> ((ItemElement)element).Name;
        }

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">new</span> IEnumerator&lt;IItem&gt;<span style="color: #000000;"> GetEnumerator()
        {
            </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>; i &lt; <span style="color: #0000ff;">base</span>.Count; i++<span style="color: #000000;">)
            {
                </span><span style="color: #0000ff;">yield</span> <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">base</span>.BaseGet(i) <span style="color: #0000ff;">as</span><span style="color: #000000;"> IItem;
            }
        }
    }</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>
<span class="cnblogs_code_collapse" style="display: none;">View Code</span></div>
<p>&nbsp;</p>
<p>2.自定义NodeElement（INode）和NodeElementCollection用于实现节点树功能。</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('130c40ce-bb08-4bae-ac1e-9c3a70176d5b')"><img id="code_img_closed_130c40ce-bb08-4bae-ac1e-9c3a70176d5b" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><img id="code_img_opened_130c40ce-bb08-4bae-ac1e-9c3a70176d5b" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('130c40ce-bb08-4bae-ac1e-9c3a70176d5b',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="">
<div id="cnblogs_code_open_130c40ce-bb08-4bae-ac1e-9c3a70176d5b" class="cnblogs_code_hide">
<pre>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> NodeElement : ConfigurationElement, INode
    {
        [ConfigurationProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>, IsRequired = <span style="color: #0000ff;">true</span><span style="color: #000000;">)]
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> Name
        {
            </span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> Convert.ToString(<span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span><span style="color: #000000;">]); }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }

        [ConfigurationProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">items</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
        [ConfigurationCollection(</span><span style="color: #0000ff;">typeof</span>(ItemElementCollection), AddItemName = <span style="color: #800000;">"</span><span style="color: #800000;">item</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> ItemElementCollection ItemElements
        {
            </span><span style="color: #0000ff;">get</span><span style="color: #000000;">
            {
                </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">items</span><span style="color: #800000;">"</span>] <span style="color: #0000ff;">as</span><span style="color: #000000;"> ItemElementCollection;
            }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">items</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }

        [ConfigurationProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">nodes</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
        [ConfigurationCollection(</span><span style="color: #0000ff;">typeof</span>(NodeElementCollection), AddItemName = <span style="color: #800000;">"</span><span style="color: #800000;">node</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> NodeElementCollection NodeElements
        {
            </span><span style="color: #0000ff;">get</span><span style="color: #000000;">
            {
                </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">nodes</span><span style="color: #800000;">"</span>] <span style="color: #0000ff;">as</span><span style="color: #000000;"> NodeElementCollection;
            }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">nodes</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }

        </span><span style="color: #0000ff;">public</span> IEnumerable&lt;IItem&gt;<span style="color: #000000;"> Items
        {
            </span><span style="color: #0000ff;">get</span><span style="color: #000000;">
            {
                </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">items</span><span style="color: #800000;">"</span>] <span style="color: #0000ff;">as</span><span style="color: #000000;"> ItemElementCollection;
            }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">items</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }

        </span><span style="color: #0000ff;">public</span> IEnumerable&lt;INode&gt;<span style="color: #000000;"> Nodes
        {
            </span><span style="color: #0000ff;">get</span><span style="color: #000000;">
            {
                </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">nodes</span><span style="color: #800000;">"</span>] <span style="color: #0000ff;">as</span><span style="color: #000000;"> NodeElementCollection;
            }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">nodes</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> GetItem(<span style="color: #0000ff;">string</span><span style="color: #000000;"> itemName)
        {
            </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.Items.FirstOrDefault(o =&gt; o.Name == itemName)?<span style="color: #000000;">.Value;
        }

        </span><span style="color: #0000ff;">public</span> T GetItem&lt;T&gt;(<span style="color: #0000ff;">string</span><span style="color: #000000;"> itemName)
        {
            </span><span style="color: #0000ff;">return</span> (T)Convert.ChangeType(<span style="color: #0000ff;">this</span>.GetItem(itemName), <span style="color: #0000ff;">typeof</span><span style="color: #000000;">(T));
        }
    }
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> NodeElementCollection : ConfigurationElementCollection, IEnumerable&lt;INode&gt;<span style="color: #000000;">
    {
        </span><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span><span style="color: #000000;"> ConfigurationElement CreateNewElement()
        {
            </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> NodeElement();
        }

        </span><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">object</span><span style="color: #000000;"> GetElementKey(ConfigurationElement element)
        {
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> ((NodeElement)element).Name;
        }

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">new</span> IEnumerator&lt;INode&gt;<span style="color: #000000;"> GetEnumerator()
        {
            </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>; i &lt; <span style="color: #0000ff;">base</span>.Count; i++<span style="color: #000000;">)
            {
                </span><span style="color: #0000ff;">yield</span> <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">base</span>.BaseGet(i) <span style="color: #0000ff;">as</span><span style="color: #000000;"> INode;
            }
        }
    }</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<p>3.自定义ConfigSection实现配置节点和配置项读取。</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('7da8b4be-221c-4de8-9c98-f3f731ee5c95')"><img id="code_img_closed_7da8b4be-221c-4de8-9c98-f3f731ee5c95" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt=""><img id="code_img_opened_7da8b4be-221c-4de8-9c98-f3f731ee5c95" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('7da8b4be-221c-4de8-9c98-f3f731ee5c95',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="">
<div id="cnblogs_code_open_7da8b4be-221c-4de8-9c98-f3f731ee5c95" class="cnblogs_code_hide">
<pre>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ConfigSection : ConfigurationSection, INode
    {
        [ConfigurationProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>, IsRequired = <span style="color: #0000ff;">true</span><span style="color: #000000;">)]
        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> Name
        {
            </span><span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> Convert.ToString(<span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span><span style="color: #000000;">]); }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">name</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }

        [ConfigurationProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">items</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
        [ConfigurationCollection(</span><span style="color: #0000ff;">typeof</span>(ItemElementCollection), AddItemName = <span style="color: #800000;">"</span><span style="color: #800000;">item</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> ItemElementCollection ItemElements
        {
            </span><span style="color: #0000ff;">get</span><span style="color: #000000;">
            {
                </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">items</span><span style="color: #800000;">"</span>] <span style="color: #0000ff;">as</span><span style="color: #000000;"> ItemElementCollection;
            }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">items</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }

        [ConfigurationProperty(</span><span style="color: #800000;">"</span><span style="color: #800000;">nodes</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
        [ConfigurationCollection(</span><span style="color: #0000ff;">typeof</span>(NodeElementCollection), AddItemName = <span style="color: #800000;">"</span><span style="color: #800000;">node</span><span style="color: #800000;">"</span><span style="color: #000000;">)]
        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> NodeElementCollection NodeElements
        {
            </span><span style="color: #0000ff;">get</span><span style="color: #000000;">
            {
                </span><span style="color: #0000ff;">return</span> (NodeElementCollection)<span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">nodes</span><span style="color: #800000;">"</span><span style="color: #000000;">];
            }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">nodes</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }

        </span><span style="color: #0000ff;">public</span> IEnumerable&lt;IItem&gt;<span style="color: #000000;"> Items
        {
            </span><span style="color: #0000ff;">get</span><span style="color: #000000;">
            {
                </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">items</span><span style="color: #800000;">"</span>] <span style="color: #0000ff;">as</span><span style="color: #000000;"> ItemElementCollection;
            }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">items</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }

        </span><span style="color: #0000ff;">public</span> IEnumerable&lt;INode&gt;<span style="color: #000000;"> Nodes
        {
            </span><span style="color: #0000ff;">get</span><span style="color: #000000;">
            {
                </span><span style="color: #0000ff;">return</span> (NodeElementCollection)<span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">nodes</span><span style="color: #800000;">"</span><span style="color: #000000;">];
            }
            </span><span style="color: #0000ff;">set</span> { <span style="color: #0000ff;">this</span>[<span style="color: #800000;">"</span><span style="color: #800000;">nodes</span><span style="color: #800000;">"</span>] =<span style="color: #000000;"> value; }
        }

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> GetItem(<span style="color: #0000ff;">string</span><span style="color: #000000;"> itemName)
        {
            </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.Items.FirstOrDefault(o =&gt; o.Name == itemName)?<span style="color: #000000;">.Value;
        }

        </span><span style="color: #0000ff;">public</span> T GetItem&lt;T&gt;(<span style="color: #0000ff;">string</span><span style="color: #000000;"> itemName)
        {
            </span><span style="color: #0000ff;">return</span> (T)Convert.ChangeType(<span style="color: #0000ff;">this</span>.GetItem(itemName), <span style="color: #0000ff;">typeof</span><span style="color: #000000;">(T));
        }
    }</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<p>4.自定义AppConfigAdapter实现IConfig接口。</p>
<div class="cnblogs_code" onclick="cnblogs_code_show('179fbb4b-0edb-4758-b731-c9590e53e215')">
	
	<img id="code_img_closed_179fbb4b-0edb-4758-b731-c9590e53e215" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="">
	<img id="code_img_opened_179fbb4b-0edb-4758-b731-c9590e53e215" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('179fbb4b-0edb-4758-b731-c9590e53e215',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="">

<div id="cnblogs_code_open_179fbb4b-0edb-4758-b731-c9590e53e215" class="cnblogs_code_hide">
<pre>    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> AppConfigAdapter : IConfig
    {
        </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> INode _section;

        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> AppConfigAdapter()
        {
            </span><span style="color: #0000ff;">var</span> sectionName = (HostingEnvironment.IsHosted ? WebConfigurationManager.OpenWebConfiguration(<span style="color: #800000;">"</span><span style="color: #800000;">~</span><span style="color: #800000;">"</span><span style="color: #000000;">) : ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None))
                .Sections.Cast</span>&lt;ConfigurationSection&gt;<span style="color: #000000;">()
                .FirstOrDefault(o </span>=&gt; o.SectionInformation.Type.IndexOf(<span style="color: #800000;">"</span><span style="color: #800000;">Onion.Configuration.AppConfig.ConfigSection</span><span style="color: #800000;">"</span>) != -<span style="color: #800080;">1</span><span style="color: #000000;">)
                .SectionInformation.Name </span>?? <span style="color: #800000;">"</span><span style="color: #800000;">Node</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            _section </span>=<span style="color: #000000;"> (INode)ConfigurationManager.GetSection(sectionName);
        }

        </span><span style="color: #0000ff;">public</span> INode GetNode(<span style="color: #0000ff;">string</span><span style="color: #000000;"> nodeName)
        {
            </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.GetNode(nodeName, <span style="color: #0000ff;">this</span><span style="color: #000000;">._section);
        }

        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Get(<span style="color: #0000ff;">string</span><span style="color: #000000;"> nameOrPath)
        {
            </span><span style="color: #0000ff;">if</span> (nameOrPath.IndexOf(<span style="color: #800000;">'</span><span style="color: #800000;">.</span><span style="color: #800000;">'</span>) == -<span style="color: #800080;">1</span><span style="color: #000000;">)
            {
                </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>._section.Items.FirstOrDefault(o =&gt; o.Name == nameOrPath)?<span style="color: #000000;">.Value;
            }
            </span><span style="color: #0000ff;">var</span> nodeItemPath = nameOrPath.Split(<span style="color: #800000;">'</span><span style="color: #800000;">.</span><span style="color: #800000;">'</span><span style="color: #000000;">);
            </span><span style="color: #0000ff;">var</span> node = <span style="color: #0000ff;">this</span><span style="color: #000000;">.GetNode(nodeItemPath.FirstOrDefault());
            </span><span style="color: #0000ff;">var</span> nodeNameList = nodeItemPath.Skip(<span style="color: #800080;">1</span>).Take(nodeItemPath.Length - <span style="color: #800080;">2</span><span style="color: #000000;">);
            </span><span style="color: #0000ff;">if</span> (node != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
            {
                </span><span style="color: #0000ff;">foreach</span> (<span style="color: #0000ff;">var</span> item <span style="color: #0000ff;">in</span><span style="color: #000000;"> nodeNameList)
                {
                    </span><span style="color: #0000ff;">if</span> (node.Nodes.Any(o =&gt; o.Name ==<span style="color: #000000;"> item))
                    {
                        node </span>= node.Nodes.FirstOrDefault(o =&gt; o.Name ==<span style="color: #000000;"> item);
                    }
                    </span><span style="color: #0000ff;">else</span><span style="color: #000000;">
                    {
                        </span><span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> System.ArgumentException(<span style="color: #0000ff;">string</span>.Format(<span style="color: #800000;">"</span><span style="color: #800000;">node name {0} error</span><span style="color: #800000;">"</span><span style="color: #000000;">, item));
                    }
                }
                </span><span style="color: #0000ff;">return</span> node.Items.FirstOrDefault(o =&gt; o.Name ==<span style="color: #000000;"> nodeItemPath.LastOrDefault()).Value;
            }
            </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;
        }

        </span><span style="color: #0000ff;">public</span> T Get&lt;T&gt;(<span style="color: #0000ff;">string</span><span style="color: #000000;"> nameOrPath)
        {
            </span><span style="color: #0000ff;">var</span> value = <span style="color: #0000ff;">this</span><span style="color: #000000;">.Get(nameOrPath);
            </span><span style="color: #0000ff;">return</span> (T)Convert.ChangeType(value, <span style="color: #0000ff;">typeof</span><span style="color: #000000;">(T));
        }

        </span><span style="color: #0000ff;">#region</span> private

        <span style="color: #0000ff;">private</span> INode GetNode(<span style="color: #0000ff;">string</span><span style="color: #000000;"> nodeName, INode node)
        {
            INode result </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;

            </span><span style="color: #0000ff;">if</span> (node.Name ==<span style="color: #000000;"> nodeName)
            {
                </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> node;
            }
            </span><span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (node.Nodes.Any())
            {
                </span><span style="color: #0000ff;">foreach</span> (<span style="color: #0000ff;">var</span> item <span style="color: #0000ff;">in</span><span style="color: #000000;"> node.Nodes)
                {
                    result </span>=<span style="color: #000000;"> GetNode(nodeName, item);
                    </span><span style="color: #0000ff;">if</span> (result != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
                    {
                        </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
                    }
                }
            }
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
        }

        </span><span style="color: #0000ff;">#endregion</span> private<span style="color: #000000;">
    }</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p>&nbsp;</p>
<p>Nuget:https://www.nuget.org/packages/Onion.Configuration/</p></div>